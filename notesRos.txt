!! faire un source devel/setup.bash pour avoir les commandes roscore...

pour créer un workspace : 
  créer un dossier src (dans le ws)
  puis catkin_make

mettre des packages : 
  aller dans cd catkin_ws/ src
  catkin_create_pkg turtlebot_control roscpp rospy std_msgs geometry_msgs
  #roscpp est un compileur 

puis refaire catkin_make dans le dossier catkin_ws
#il crée la structure de nos packages

#ne pas hesiter à faire un git pour tout mettre dessus

dans turtlebot_control_src :
  touch bascic_controller.cpp # création d'un scrpit en cpp
  essayer de print "hello" dedans
  Changer et décommenter le CMakeLists.txt #lignes 150, 137
  ne pas oublier de sauvegarder le fichier CMakeLists.txt

catkin_make (pour "build" le ws)
source devel/setup.bash (si tu es à la base du ws autrement, ce serait source setup.bash si tu es déjà dans "devel)
rosrun turtlebot_control basic_controller 

il faut parfois un master # ne pas oublier de faire un roscore
puis ouvrir un nouveau terminal
rosrun turtlesim turtlesim_node

Pour voir le graphe des connections : rqt_graph

roslaunch permet d'éviter le roscore + un deuxième terminal
Une fois fait "rosrun turtlesim turtlesim_node  #créer une tortue

ros sudo apt install ros-noetic_teleop_twist_keyboard
rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=turtle1/cmd_vel     #pour controller avec le pad, très golri

définition d'un publisher, exemple : cmd_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 1000);

quand on lance un launch, avant il faut faire un catkin_make, source puis ensuite faire un rosrun turtlebot_control basic_controller

rostopic info give the message type
auto assigne le type automatiquement 

ROS wiki 

Name your publishers with "pub" at the end (same for subscribers)

packages in the src
build : files from "

to rosrun, need roscore

# DEFINITIONS : 
#launch folder : run the exucutable
#msg folder: custums messagers
#scipts folder : python nodes
#utils folder : generic folder with tools to help debug, mathematical equations...
#CMakeLists : used by the build system to see dependencies and to know what are scripts, services... Hard to see errors but very important
#package.xml: the thing that declare the package and its dependencies
#ROS node : the executable of the code you have in the package
#rostopic : thing for a specific task
#publisher : put information on the topic/ subscriber : take information of the topic # you need same : topic_name, message_type, frequency
  #type is the name of the executable (you can find it in CMakeLists.txt), name will be the name of the nodes

#utile pour reproduire des mouvements
mkdir bag 
cd bag
rosbag record /turtle1/cmd_vel
rosbag play # il rejoue les data
rostopic
#information for the bag : rosbag info
 


