!! faire un source devel/setup.bash pour avoir les commandes roscore...

pour créer un workspace : 
  créer un dossier src (dans le ws)
  puis catkin_make

mettre des packages : 
  aller dans cd catkin_ws/ src
  catkin_create_pkg turtlebot_control roscpp rospy std_msgs geometry_msgs
  #roscpp est un compileur 

puis refaire catkin_make dans le dossier catkin_ws
#il crée la structure de nos packages

#ne pas hesiter à faire un git pour tout mettre dessus

dans turtlebot_control_src :
  touch bascic_controller.cpp # création d'un scrpit en cpp
  essayer de print "hello" dedans
  Changer et décommenter le CMakeLists.txt #lignes 150, 137
  ne pas oublier de sauvegarder le fichier CMakeLists.txt

catkin_make (pour "build" le ws)
source devel/setup.bash (si tu es à la base du ws autrement, ce serait source setup.bash si tu es déjà dans "devel)
rosrun turtlebot_control basic_controller 

il faut parfois un master # ne pas oublier de faire un roscore
puis ouvrir un nouveau terminal
rosrun turtlesim turtlesim_node

Pour voir le graphe des connections : rqt_graph

roslaunch permet d'éviter le roscore + un deuxième terminal
Une fois fait "rosrun turtlesim turtlesim_node  #créer une tortue

ros sudo apt install ros-noetic_teleop_twist_keyboard
rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=turtle1/cmd_vel     #pour controller avec le pad, très golri

définition d'un publisher, exemple : cmd_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 1000);

quand on lance un launch, avant il faut faire un catkin_make, source puis ensuite faire un rosrun turtlebot_control basic_controller

rostopic info give the message type
auto assigne le type automatiquement 

ROS wiki 

Name your publishers with "pub" at the end (same for subscribers)

packages in the src
build : files from "

to rosrun, need roscore

# DEFINITIONS : 
#launch folder : run the exucutable
#msg folder: custums messagers
#scipts folder : python nodes
#utils folder : generic folder with tools to help debug, mathematical equations...
#CMakeLists : used by the build system to see dependencies and to know what are scripts, services... Hard to see errors but very important
#package.xml: the thing that declare the package and its dependencies
#ROS node : the executable of the code you have in the package
#rostopic : thing for a specific task
#publisher : put information on the topic/ subscriber : take information of the topic # you need same : topic_name, message_type, frequency
  #type is the name of the executable (you can find it in CMakeLists.txt), name will be the name of the nodes

#utile pour reproduire des mouvements
mkdir bag 
cd bag
rosbag record /turtle1/cmd_vel
rosbag play # il rejoue les data
rostopic
#information for the bag : rosbag info
 

#Pour MATEO
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
